Crux Program has no type errors.
ast.DeclarationList(3)
  ast.FunctionDefinition(3)[Symbol(main:func(TypeList()):void), []]
    ast.StatementList(4)
      void: ast.Call(4)[Symbol(printBool)]
        bool: ast.OpExpr(4)[LOGIC_AND]
          bool: ast.OpExpr(4)[LT]
            int: ast.LiteralInt(4)[3]
            int: ast.LiteralInt(4)[5]
          bool: ast.OpExpr(4)[GT]
            int: ast.LiteralInt(4)[4]
            int: ast.LiteralInt(4)[2]
      void: ast.Call(5)[Symbol(println)]
      void: ast.Call(6)[Symbol(printBool)]
        bool: ast.OpExpr(6)[LOGIC_OR]
          bool: ast.OpExpr(6)[LOGIC_AND]
            bool: ast.OpExpr(6)[LT]
              int: ast.LiteralInt(6)[3]
              int: ast.LiteralInt(6)[5]
            bool: ast.OpExpr(6)[LT]
              int: ast.LiteralInt(6)[2]
              int: ast.LiteralInt(6)[1]
          bool: ast.OpExpr(6)[LT]
            int: ast.LiteralInt(6)[1]
            int: ast.LiteralInt(6)[2]
      void: ast.Call(7)[Symbol(println)]
      void: ast.Call(8)[Symbol(printBool)]
        bool: ast.OpExpr(8)[LOGIC_AND]
          bool: ast.OpExpr(8)[LT]
            int: ast.OpExpr(8)[ADD]
              int: ast.LiteralInt(8)[1]
              int: ast.LiteralInt(8)[2]
            int: ast.LiteralInt(8)[4]
          bool: ast.OpExpr(8)[GT]
            int: ast.LiteralInt(8)[2]
            int: ast.LiteralInt(8)[1]
      void: ast.Call(9)[Symbol(println)]
      void: ast.Call(10)[Symbol(printBool)]
        bool: ast.OpExpr(10)[LOGIC_OR]
          bool: ast.OpExpr(10)[LOGIC_AND]
            bool: ast.LiteralBool(10)[FALSE]
            bool: ast.LiteralBool(10)[FALSE]
          bool: ast.LiteralBool(10)[FALSE]
      void: ast.Call(11)[Symbol(println)]
      void: ast.Call(12)[Symbol(printBool)]
        bool: ast.OpExpr(12)[LOGIC_OR]
          bool: ast.OpExpr(12)[LOGIC_AND]
            bool: ast.LiteralBool(12)[FALSE]
            bool: ast.LiteralBool(12)[FALSE]
          bool: ast.LiteralBool(12)[TRUE]
      void: ast.Call(13)[Symbol(println)]
      void: ast.Call(14)[Symbol(printBool)]
        bool: ast.OpExpr(14)[LOGIC_OR]
          bool: ast.OpExpr(14)[LOGIC_AND]
            bool: ast.LiteralBool(14)[FALSE]
            bool: ast.LiteralBool(14)[TRUE]
          bool: ast.LiteralBool(14)[FALSE]
      void: ast.Call(15)[Symbol(println)]
      void: ast.Call(16)[Symbol(printBool)]
        bool: ast.OpExpr(16)[LOGIC_OR]
          bool: ast.OpExpr(16)[LOGIC_AND]
            bool: ast.LiteralBool(16)[FALSE]
            bool: ast.LiteralBool(16)[TRUE]
          bool: ast.LiteralBool(16)[TRUE]
      void: ast.Call(17)[Symbol(println)]
      void: ast.Call(18)[Symbol(printBool)]
        bool: ast.OpExpr(18)[LOGIC_OR]
          bool: ast.OpExpr(18)[LOGIC_AND]
            bool: ast.LiteralBool(18)[TRUE]
            bool: ast.LiteralBool(18)[FALSE]
          bool: ast.LiteralBool(18)[FALSE]
      void: ast.Call(19)[Symbol(println)]
      void: ast.Call(20)[Symbol(printBool)]
        bool: ast.OpExpr(20)[LOGIC_OR]
          bool: ast.OpExpr(20)[LOGIC_AND]
            bool: ast.LiteralBool(20)[TRUE]
            bool: ast.LiteralBool(20)[FALSE]
          bool: ast.LiteralBool(20)[TRUE]
      void: ast.Call(21)[Symbol(println)]
      void: ast.Call(22)[Symbol(printBool)]
        bool: ast.OpExpr(22)[LOGIC_OR]
          bool: ast.OpExpr(22)[LOGIC_AND]
            bool: ast.LiteralBool(22)[TRUE]
            bool: ast.LiteralBool(22)[TRUE]
          bool: ast.LiteralBool(22)[FALSE]
      void: ast.Call(23)[Symbol(println)]
      void: ast.Call(24)[Symbol(printBool)]
        bool: ast.OpExpr(24)[LOGIC_OR]
          bool: ast.OpExpr(24)[LOGIC_AND]
            bool: ast.LiteralBool(24)[TRUE]
            bool: ast.LiteralBool(24)[TRUE]
          bool: ast.LiteralBool(24)[TRUE]
      void: ast.Call(25)[Symbol(println)]
      void: ast.Call(26)[Symbol(printBool)]
        bool: ast.OpExpr(26)[LOGIC_OR]
          bool: ast.LiteralBool(26)[FALSE]
          bool: ast.OpExpr(26)[LOGIC_AND]
            bool: ast.LiteralBool(26)[FALSE]
            bool: ast.LiteralBool(26)[FALSE]
      void: ast.Call(27)[Symbol(println)]
      void: ast.Call(28)[Symbol(printBool)]
        bool: ast.OpExpr(28)[LOGIC_OR]
          bool: ast.LiteralBool(28)[FALSE]
          bool: ast.OpExpr(28)[LOGIC_AND]
            bool: ast.LiteralBool(28)[FALSE]
            bool: ast.LiteralBool(28)[TRUE]
      void: ast.Call(29)[Symbol(println)]
      void: ast.Call(30)[Symbol(printBool)]
        bool: ast.OpExpr(30)[LOGIC_OR]
          bool: ast.LiteralBool(30)[FALSE]
          bool: ast.OpExpr(30)[LOGIC_AND]
            bool: ast.LiteralBool(30)[TRUE]
            bool: ast.LiteralBool(30)[FALSE]
      void: ast.Call(31)[Symbol(println)]
      void: ast.Call(32)[Symbol(printBool)]
        bool: ast.OpExpr(32)[LOGIC_OR]
          bool: ast.LiteralBool(32)[FALSE]
          bool: ast.OpExpr(32)[LOGIC_AND]
            bool: ast.LiteralBool(32)[TRUE]
            bool: ast.LiteralBool(32)[TRUE]
      void: ast.Call(33)[Symbol(println)]
      void: ast.Call(34)[Symbol(printBool)]
        bool: ast.OpExpr(34)[LOGIC_OR]
          bool: ast.LiteralBool(34)[TRUE]
          bool: ast.OpExpr(34)[LOGIC_AND]
            bool: ast.LiteralBool(34)[FALSE]
            bool: ast.LiteralBool(34)[FALSE]
      void: ast.Call(35)[Symbol(println)]
      void: ast.Call(36)[Symbol(printBool)]
        bool: ast.OpExpr(36)[LOGIC_OR]
          bool: ast.LiteralBool(36)[TRUE]
          bool: ast.OpExpr(36)[LOGIC_AND]
            bool: ast.LiteralBool(36)[FALSE]
            bool: ast.LiteralBool(36)[TRUE]
      void: ast.Call(37)[Symbol(println)]
      void: ast.Call(38)[Symbol(printBool)]
        bool: ast.OpExpr(38)[LOGIC_OR]
          bool: ast.LiteralBool(38)[TRUE]
          bool: ast.OpExpr(38)[LOGIC_AND]
            bool: ast.LiteralBool(38)[TRUE]
            bool: ast.LiteralBool(38)[FALSE]
      void: ast.Call(39)[Symbol(println)]
      void: ast.Call(40)[Symbol(printBool)]
        bool: ast.OpExpr(40)[LOGIC_OR]
          bool: ast.LiteralBool(40)[TRUE]
          bool: ast.OpExpr(40)[LOGIC_AND]
            bool: ast.LiteralBool(40)[TRUE]
            bool: ast.LiteralBool(40)[TRUE]
      void: ast.Call(41)[Symbol(println)]
