Crux Program has no type errors.
ast.DeclarationList(3)
  ast.ArrayDeclaration(3)[Symbol(x:array[4,int])]
  ast.ArrayDeclaration(4)[Symbol(y:array[5,int])]
  ast.FunctionDefinition(6)[Symbol(main:func(TypeList()):void), []]
    ast.StatementList(7)
      void: ast.Assignment(7)
        Address(int): ast.ArrayAccess(7)
          Address(array[4,int]): ast.Name(7)[x]
          int: ast.LiteralInt(7)[0]
        int: ast.LiteralInt(7)[0]
      void: ast.Assignment(8)
        Address(int): ast.ArrayAccess(8)
          Address(array[4,int]): ast.Name(8)[x]
          int: ast.LiteralInt(8)[1]
        int: ast.LiteralInt(8)[1]
      void: ast.Assignment(9)
        Address(int): ast.ArrayAccess(9)
          Address(array[4,int]): ast.Name(9)[x]
          int: ast.LiteralInt(9)[2]
        int: ast.LiteralInt(9)[2]
      void: ast.Assignment(10)
        Address(int): ast.ArrayAccess(10)
          Address(array[4,int]): ast.Name(10)[x]
          int: ast.LiteralInt(10)[3]
        int: ast.LiteralInt(10)[3]
      void: ast.Assignment(11)
        Address(int): ast.ArrayAccess(11)
          Address(array[5,int]): ast.Name(11)[y]
          int: ast.LiteralInt(11)[0]
        int: ast.LiteralInt(11)[0]
      void: ast.Assignment(12)
        Address(int): ast.ArrayAccess(12)
          Address(array[5,int]): ast.Name(12)[y]
          int: ast.LiteralInt(12)[1]
        int: ast.LiteralInt(12)[1]
      void: ast.Assignment(13)
        Address(int): ast.ArrayAccess(13)
          Address(array[5,int]): ast.Name(13)[y]
          int: ast.LiteralInt(13)[2]
        int: ast.LiteralInt(13)[2]
      void: ast.Assignment(14)
        Address(int): ast.ArrayAccess(14)
          Address(array[5,int]): ast.Name(14)[y]
          int: ast.LiteralInt(14)[3]
        int: ast.LiteralInt(14)[3]
      void: ast.Assignment(15)
        Address(int): ast.ArrayAccess(15)
          Address(array[5,int]): ast.Name(15)[y]
          int: ast.LiteralInt(15)[4]
        int: ast.LiteralInt(15)[4]
      void: ast.Assignment(16)
        Address(int): ast.ArrayAccess(16)
          Address(array[4,int]): ast.Name(16)[x]
          int: ast.Dereference(16)
            Address(int): ast.ArrayAccess(16)
              Address(array[5,int]): ast.Name(16)[y]
              int: ast.LiteralInt(16)[2]
        int: ast.Dereference(16)
          Address(int): ast.ArrayAccess(16)
            Address(array[4,int]): ast.Name(16)[x]
            int: ast.Dereference(16)
              Address(int): ast.ArrayAccess(16)
                Address(array[5,int]): ast.Name(16)[y]
                int: ast.LiteralInt(16)[1]
      void: ast.Call(17)[Symbol(printInt)]
        int: ast.Dereference(17)
          Address(int): ast.ArrayAccess(17)
            Address(array[4,int]): ast.Name(17)[x]
            int: ast.LiteralInt(17)[2]
