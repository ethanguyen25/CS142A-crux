Crux Program has no type errors.
ast.DeclarationList(3)
  ast.FunctionDefinition(3)[Symbol(paramtest:func(TypeList(int, int, int, int, int, int, int, int, int)):void), [Symbol(a:int), Symbol(b:int), Symbol(c:int), Symbol(d:int), Symbol(e:int), Symbol(f:int), Symbol(g:int), Symbol(h:int), Symbol(i:int)]]
    ast.StatementList(4)
      void: ast.Call(4)[Symbol(printInt)]
        int: ast.Dereference(4)
          Address(int): ast.Name(4)[a]
      void: ast.Call(5)[Symbol(println)]
      void: ast.Call(6)[Symbol(printInt)]
        int: ast.Dereference(6)
          Address(int): ast.Name(6)[b]
      void: ast.Call(7)[Symbol(println)]
      void: ast.Call(8)[Symbol(printInt)]
        int: ast.Dereference(8)
          Address(int): ast.Name(8)[c]
      void: ast.Call(9)[Symbol(println)]
      void: ast.Call(10)[Symbol(printInt)]
        int: ast.Dereference(10)
          Address(int): ast.Name(10)[d]
      void: ast.Call(11)[Symbol(println)]
      void: ast.Call(12)[Symbol(printInt)]
        int: ast.Dereference(12)
          Address(int): ast.Name(12)[e]
      void: ast.Call(13)[Symbol(println)]
      void: ast.Call(14)[Symbol(printInt)]
        int: ast.Dereference(14)
          Address(int): ast.Name(14)[f]
      void: ast.Call(15)[Symbol(println)]
      void: ast.Call(16)[Symbol(printInt)]
        int: ast.Dereference(16)
          Address(int): ast.Name(16)[g]
      void: ast.Call(17)[Symbol(println)]
      void: ast.Call(18)[Symbol(printInt)]
        int: ast.Dereference(18)
          Address(int): ast.Name(18)[h]
      void: ast.Call(19)[Symbol(println)]
      void: ast.Call(20)[Symbol(printInt)]
        int: ast.Dereference(20)
          Address(int): ast.Name(20)[i]
      void: ast.Call(21)[Symbol(println)]
  ast.FunctionDefinition(24)[Symbol(main:func(TypeList()):void), []]
    ast.StatementList(25)
      void: ast.Call(25)[Symbol(paramtest)]
        int: ast.LiteralInt(25)[1]
        int: ast.LiteralInt(25)[2]
        int: ast.LiteralInt(25)[3]
        int: ast.LiteralInt(25)[4]
        int: ast.LiteralInt(25)[5]
        int: ast.LiteralInt(25)[6]
        int: ast.LiteralInt(25)[7]
        int: ast.LiteralInt(25)[8]
        int: ast.LiteralInt(25)[9]
