Crux Program has no type errors.
ast.DeclarationList(3)
  ast.FunctionDefinition(3)[Symbol(main:func(TypeList()):void), []]
    ast.StatementList(4)
      void: ast.Call(4)[Symbol(printInt)]
        int: ast.OpExpr(4)[ADD]
          int: ast.OpExpr(4)[MULT]
            int: ast.LiteralInt(4)[3]
            int: ast.LiteralInt(4)[5]
          int: ast.LiteralInt(4)[7]
      void: ast.Call(5)[Symbol(println)]
      void: ast.Call(6)[Symbol(printInt)]
        int: ast.OpExpr(6)[ADD]
          int: ast.LiteralInt(6)[3]
          int: ast.OpExpr(6)[MULT]
            int: ast.LiteralInt(6)[5]
            int: ast.LiteralInt(6)[7]
      void: ast.Call(7)[Symbol(println)]
      void: ast.Call(8)[Symbol(printInt)]
        int: ast.OpExpr(8)[SUB]
          int: ast.OpExpr(8)[ADD]
            int: ast.LiteralInt(8)[3]
            int: ast.LiteralInt(8)[5]
          int: ast.LiteralInt(8)[7]
      void: ast.Call(9)[Symbol(println)]
      void: ast.Call(10)[Symbol(printInt)]
        int: ast.OpExpr(10)[ADD]
          int: ast.OpExpr(10)[SUB]
            int: ast.LiteralInt(10)[3]
            int: ast.LiteralInt(10)[5]
          int: ast.LiteralInt(10)[7]
      void: ast.Call(11)[Symbol(println)]
      void: ast.Call(12)[Symbol(printInt)]
        int: ast.OpExpr(12)[ADD]
          int: ast.OpExpr(12)[DIV]
            int: ast.LiteralInt(12)[3]
            int: ast.LiteralInt(12)[5]
          int: ast.LiteralInt(12)[7]
      void: ast.Call(13)[Symbol(println)]
      void: ast.Call(14)[Symbol(printInt)]
        int: ast.OpExpr(14)[MULT]
          int: ast.OpExpr(14)[DIV]
            int: ast.LiteralInt(14)[3]
            int: ast.LiteralInt(14)[5]
          int: ast.LiteralInt(14)[7]
      void: ast.Call(15)[Symbol(println)]
      void: ast.Call(16)[Symbol(printInt)]
        int: ast.OpExpr(16)[ADD]
          int: ast.LiteralInt(16)[3]
          int: ast.OpExpr(16)[DIV]
            int: ast.LiteralInt(16)[5]
            int: ast.LiteralInt(16)[7]
      void: ast.Call(17)[Symbol(println)]
      void: ast.Call(18)[Symbol(printInt)]
        int: ast.OpExpr(18)[MULT]
          int: ast.OpExpr(18)[ADD]
            int: ast.LiteralInt(18)[3]
            int: ast.LiteralInt(18)[5]
          int: ast.LiteralInt(18)[7]
      void: ast.Call(19)[Symbol(println)]
      void: ast.Call(20)[Symbol(printInt)]
        int: ast.OpExpr(20)[ADD]
          int: ast.OpExpr(20)[SUB]
            int: ast.LiteralInt(20)[3]
            int: ast.LiteralInt(20)[5]
          int: ast.LiteralInt(20)[7]
      void: ast.Call(21)[Symbol(println)]
      void: ast.Call(22)[Symbol(printInt)]
        int: ast.OpExpr(22)[ADD]
          int: ast.OpExpr(22)[MULT]
            int: ast.LiteralInt(22)[2]
            int: ast.LiteralInt(22)[3]
          int: ast.OpExpr(22)[DIV]
            int: ast.LiteralInt(22)[10]
            int: ast.LiteralInt(22)[2]
      void: ast.Call(23)[Symbol(println)]
      void: ast.Call(24)[Symbol(printInt)]
        int: ast.OpExpr(24)[ADD]
          int: ast.OpExpr(24)[SUB]
            int: ast.LiteralInt(24)[5]
            int: ast.LiteralInt(24)[3]
          int: ast.LiteralInt(24)[2]
      void: ast.Call(25)[Symbol(println)]
